# -*- coding: utf-8 -*-
"""diabetes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ivjC7Ezq4ix38IDEePiJJEFGJ0pxCM91

1. Library yang digunakan
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""2. Load Dataset"""

diabetes_dataset = pd.read_csv('diabetes.csv')

diabetes_dataset.head()

diabetes_dataset.shape

diabetes_dataset['Outcome'].value_counts()

# memisahkan data dan label
X = diabetes_dataset.drop (columns='Outcome', axis=1)
Y = diabetes_dataset['Outcome']

print(X)

print(Y)

"""3. Standarisasi Data"""

scaler = StandardScaler()

scaler.fit(X)

standrized_data = scaler.transform(X)

print(standrized_data)

X = standrized_data
Y = diabetes_dataset['Outcome']

print(X)
print(Y)

"""4. Memisahkan Data Training dan Data testing"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""5. Membuat data latih menggunakan algoritma SVM (Support Vector Machine)"""

classifier = svm.SVC(kernel='linear')

classifier.fit(X_train, Y_train)

"""6. Membuat model evaluasi untuk mengukur tingkat akurasi"""

X_train_predicition = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_predicition, Y_train)

print('Akurasi data trainig didapat = ', training_data_accuracy)

X_test_predicition = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_predicition, Y_test)

print('Akurasi data testing didpat = ', test_data_accuracy)

"""7. Membuat Model Prediksi"""

input_data = (6,148,72,35,0,33.6,0.627,50)

input_data_as_numpy_array = np.array(input_data)

input_data_reshape = input_data_as_numpy_array.reshape(1,-1)

std_data = scaler.transform(input_data_reshape)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

if (prediction[0] == 0):
    print('Pasien Tidak Terkena Diabetes')
else :
    print('Pasien Terkena Diabetes')

"""8. Simpan Model"""

import pickle

filename = 'diabetes_model.sav'
pickle.dump(classifier, open(filename, 'wb'))